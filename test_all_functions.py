from dotenv import load_dotenv
import os
from agents.search_agent import SearchAgent
from agents.processing_agent import ProcessingAgent
from agents.classification_agent import ClassificationAgent
from agents.summary_agent import SummaryAgent
from agents.synthesis_agent import SynthesisAgent
from agents.audio_agent import AudioAgent

# Load environment variables from .env file
load_dotenv()

def test_search_agent():
    print("Testing Search Agent...")
    search_agent = SearchAgent()
    query = "machine learning"
    papers = search_agent.search_papers(query, num_results=3)
    if not papers:
        print("Search Agent failed to find any papers.")
        return False
    print(f"Found {len(papers)} papers:")
    for i, paper in enumerate(papers):
        print(f"Paper {i+1}: {paper['title']} ({paper['link']})")
    return True

def test_processing_agent():
    print("\nTesting Processing Agent...")
    processing_agent = ProcessingAgent()
    url = "https://arxiv.org/pdf/2204.08778.pdf"
    try:
        text = processing_agent.extract_text_from_url(url)
        print(f"Extracted text from URL: {url}")
        print(f"Sample text: {text[:200]}...\n")  # Print first 200 characters
    except Exception as e:
        print(f"Processing Agent failed with error: {e}")
        return False
    return True

def test_classification_agent():
    print("\nTesting Classification Agent...")
    classification_agent = ClassificationAgent()
    sample_text = "Machine learning is a field of artificial intelligence that uses algorithms to learn from data."
    topics = ["AI", "ML", "Data Science"]
    try:
        topic = classification_agent.classify_paper(sample_text, topics)
        print(f"Classified text into topic: {topic}")
    except Exception as e:
        print(f"Classification Agent failed with error: {e}")
        return False
    return True

def test_summary_agent():
    print("\nTesting Summary Agent...")
    summary_agent = SummaryAgent()
    sample_text = "Machine learning is a field of artificial intelligence that uses algorithms to learn from data. It has applications in healthcare, finance, and autonomous vehicles."
    try:
        summary = summary_agent.generate_summary(sample_text)
        print(f"Generated summary: {summary}")
    except Exception as e:
        print(f"Summary Agent failed with error: {e}")
        return False
    return True

def test_synthesis_agent():
    print("\nTesting Synthesis Agent...")
    synthesis_agent = SynthesisAgent()
    summaries = [
        "Machine learning is a subset of AI.",
        "Deep learning is a type of machine learning.",
        "Reinforcement learning trains agents to make decisions."
    ]
    try:
        synthesis = synthesis_agent.synthesize_findings(summaries)
        print(f"Synthesized findings: {synthesis}")
    except Exception as e:
        print(f"Synthesis Agent failed with error: {e}")
        return False
    return True

def test_audio_agent():
    print("\nTesting Audio Agent...")
    audio_agent = AudioAgent()
    text = "This is a test audio file generated by the Audio Agent."
    output_file = "test_output.mp3"
    try:
        audio_agent.generate_audio(text, output_file)
        print(f"Audio file generated: {output_file}")
    except Exception as e:
        print(f"Audio Agent failed with error: {e}")
        return False
    return True

def run_full_workflow():
    print("\nRunning Full Workflow...")
    search_agent = SearchAgent()
    processing_agent = ProcessingAgent()
    classification_agent = ClassificationAgent()
    summary_agent = SummaryAgent()
    synthesis_agent = SynthesisAgent()
    audio_agent = AudioAgent()

    query = "machine learning"
    papers = search_agent.search_papers(query, num_results=2)
    if not papers:
        print("No papers found. Exiting workflow test.")
        return False

    summaries = []
    for i, paper in enumerate(papers):
        print(f"\nProcessing Paper {i+1}: {paper['title']}")
        text = processing_agent.extract_text_from_url(paper["link"])
        topic = classification_agent.classify_paper(text, ["AI", "ML", "Data Science"])
        summary = summary_agent.generate_summary(text)
        print(f"Topic: {topic}")
        print(f"Summary: {summary}")
        summaries.append(summary)

    synthesis = synthesis_agent.synthesize_findings(summaries)
    print(f"\nSynthesized Findings: {synthesis}")

    audio_agent.generate_audio(synthesis, "workflow_output.mp3")
    print("Audio file generated: workflow_output.mp3")
    return True

if __name__ == "__main__":
    print("Starting Tests...")
    tests_passed = True

    # Test individual agents
    tests_passed &= test_search_agent()
    tests_passed &= test_processing_agent()
    tests_passed &= test_classification_agent()
    tests_passed &= test_summary_agent()
    tests_passed &= test_synthesis_agent()
    tests_passed &= test_audio_agent()

    # Run full workflow
    tests_passed &= run_full_workflow()

    if tests_passed:
        print("\nAll tests passed successfully!")
    else:
        print("\nSome tests failed. Please review the logs for details.")